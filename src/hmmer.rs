/* automatically generated by rust-bindgen 0.59.1 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type ESL_DSQ = u8;
pub type esl_pos_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_ALPHABET {
    pub type_: ::std::os::raw::c_int,
    pub K: ::std::os::raw::c_int,
    pub Kp: ::std::os::raw::c_int,
    pub sym: *mut ::std::os::raw::c_char,
    pub inmap: [ESL_DSQ; 128usize],
    pub degen: *mut *mut ::std::os::raw::c_char,
    pub ndegen: *mut ::std::os::raw::c_int,
    pub complement: *mut ESL_DSQ,
}
#[test]
fn bindgen_test_layout_ESL_ALPHABET() {
    assert_eq!(
        ::std::mem::size_of::<ESL_ALPHABET>(),
        176usize,
        concat!("Size of: ", stringify!(ESL_ALPHABET))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_ALPHABET>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_ALPHABET))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).K as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).Kp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(Kp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).sym as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).inmap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(inmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).degen as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(degen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).ndegen as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(ndegen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_ALPHABET>())).complement as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_ALPHABET),
            "::",
            stringify!(complement)
        )
    );
}
extern "C" {
    pub fn esl_alphabet_Destroy(a: *mut ESL_ALPHABET);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_OPTIONS {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub defval: *mut ::std::os::raw::c_char,
    pub envvar: *mut ::std::os::raw::c_char,
    pub range: *mut ::std::os::raw::c_char,
    pub toggle_opts: *mut ::std::os::raw::c_char,
    pub required_opts: *mut ::std::os::raw::c_char,
    pub incompat_opts: *mut ::std::os::raw::c_char,
    pub help: *mut ::std::os::raw::c_char,
    pub docgrouptag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ESL_OPTIONS() {
    assert_eq!(
        ::std::mem::size_of::<ESL_OPTIONS>(),
        80usize,
        concat!("Size of: ", stringify!(ESL_OPTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_OPTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_OPTIONS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).defval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(defval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).envvar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(envvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).range as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).toggle_opts as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(toggle_opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).required_opts as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(required_opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).incompat_opts as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(incompat_opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).help as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_OPTIONS>())).docgrouptag as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_OPTIONS),
            "::",
            stringify!(docgrouptag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_GETOPTS {
    pub opt: *const ESL_OPTIONS,
    pub nopts: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub optind: ::std::os::raw::c_int,
    pub nfiles: ::std::os::raw::c_int,
    pub val: *mut *mut ::std::os::raw::c_char,
    pub setby: *mut ::std::os::raw::c_int,
    pub valloc: *mut ::std::os::raw::c_int,
    pub optstring: *mut ::std::os::raw::c_char,
    pub spoof: *mut ::std::os::raw::c_char,
    pub spoof_argv: *mut *mut ::std::os::raw::c_char,
    pub errbuf: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_ESL_GETOPTS() {
    assert_eq!(
        ::std::mem::size_of::<ESL_GETOPTS>(),
        208usize,
        concat!("Size of: ", stringify!(ESL_GETOPTS))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_GETOPTS>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_GETOPTS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).opt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).nopts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(nopts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).argc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).argv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).optind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(optind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).nfiles as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(nfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).setby as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(setby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).valloc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(valloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).optstring as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(optstring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).spoof as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(spoof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).spoof_argv as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(spoof_argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_GETOPTS>())).errbuf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_GETOPTS),
            "::",
            stringify!(errbuf)
        )
    );
}
extern "C" {
    pub fn esl_getopts_Create(opt: *const ESL_OPTIONS) -> *mut ESL_GETOPTS;
}
extern "C" {
    pub fn esl_getopts_Destroy(g: *mut ESL_GETOPTS);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_RANDOMNESS {
    pub type_: ::std::os::raw::c_int,
    pub mti: ::std::os::raw::c_int,
    pub mt: [u32; 624usize],
    pub x: u32,
    pub seed: u32,
}
#[test]
fn bindgen_test_layout_ESL_RANDOMNESS() {
    assert_eq!(
        ::std::mem::size_of::<ESL_RANDOMNESS>(),
        2512usize,
        concat!("Size of: ", stringify!(ESL_RANDOMNESS))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_RANDOMNESS>(),
        4usize,
        concat!("Alignment of ", stringify!(ESL_RANDOMNESS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_RANDOMNESS>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_RANDOMNESS),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_RANDOMNESS>())).mti as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_RANDOMNESS),
            "::",
            stringify!(mti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_RANDOMNESS>())).mt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_RANDOMNESS),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_RANDOMNESS>())).x as *const _ as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_RANDOMNESS),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_RANDOMNESS>())).seed as *const _ as usize },
        2508usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_RANDOMNESS),
            "::",
            stringify!(seed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_HMM {
    pub M: ::std::os::raw::c_int,
    pub K: ::std::os::raw::c_int,
    pub pi: *mut f32,
    pub t: *mut *mut f32,
    pub e: *mut *mut f32,
    pub eo: *mut *mut f32,
    pub abc: *const ESL_ALPHABET,
}
#[test]
fn bindgen_test_layout_ESL_HMM() {
    assert_eq!(
        ::std::mem::size_of::<ESL_HMM>(),
        48usize,
        concat!("Size of: ", stringify!(ESL_HMM))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_HMM>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_HMM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).K as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).pi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).e as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).eo as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(eo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_HMM>())).abc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_HMM),
            "::",
            stringify!(abc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_FILEPARSER {
    pub fp: *mut FILE,
    pub buf: *mut ::std::os::raw::c_char,
    pub buflen: ::std::os::raw::c_int,
    pub s: *mut ::std::os::raw::c_char,
    pub commentchar: ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub linenumber: ::std::os::raw::c_int,
    pub errbuf: [::std::os::raw::c_char; 128usize],
    pub is_buffer: ::std::os::raw::c_int,
    pub mem_buffer: *const ::std::os::raw::c_char,
    pub mem_size: ::std::os::raw::c_int,
    pub mem_pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ESL_FILEPARSER() {
    assert_eq!(
        ::std::mem::size_of::<ESL_FILEPARSER>(),
        200usize,
        concat!("Size of: ", stringify!(ESL_FILEPARSER))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_FILEPARSER>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_FILEPARSER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).buflen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).s as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).commentchar as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(commentchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).filename as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).linenumber as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(linenumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).errbuf as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(errbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).is_buffer as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(is_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).mem_buffer as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(mem_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).mem_size as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(mem_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_FILEPARSER>())).mem_pos as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_FILEPARSER),
            "::",
            stringify!(mem_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_SSI {
    pub fp: *mut FILE,
    pub flags: u32,
    pub offsz: u32,
    pub nfiles: u16,
    pub nprimary: u64,
    pub nsecondary: u64,
    pub flen: u32,
    pub plen: u32,
    pub slen: u32,
    pub frecsize: u32,
    pub precsize: u32,
    pub srecsize: u32,
    pub foffset: off_t,
    pub poffset: off_t,
    pub soffset: off_t,
    pub filename: *mut *mut ::std::os::raw::c_char,
    pub fileformat: *mut u32,
    pub fileflags: *mut u32,
    pub bpl: *mut u32,
    pub rpl: *mut u32,
}
#[test]
fn bindgen_test_layout_ESL_SSI() {
    assert_eq!(
        ::std::mem::size_of::<ESL_SSI>(),
        128usize,
        concat!("Size of: ", stringify!(ESL_SSI))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_SSI>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_SSI))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).offsz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(offsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).nfiles as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(nfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).nprimary as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(nprimary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).nsecondary as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(nsecondary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).flen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(flen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).plen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(plen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).slen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).frecsize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(frecsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).precsize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(precsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).srecsize as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(srecsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).foffset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(foffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).poffset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(poffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).soffset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(soffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).filename as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).fileformat as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(fileformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).fileflags as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(fileflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).bpl as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(bpl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SSI>())).rpl as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SSI),
            "::",
            stringify!(rpl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ESL_SQ {
    pub name: *mut ::std::os::raw::c_char,
    pub acc: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub tax_id: i32,
    pub seq: *mut ::std::os::raw::c_char,
    pub dsq: *mut ESL_DSQ,
    pub ss: *mut ::std::os::raw::c_char,
    pub n: i64,
    pub start: i64,
    pub end: i64,
    pub C: i64,
    pub W: i64,
    pub L: i64,
    pub source: *mut ::std::os::raw::c_char,
    pub nalloc: ::std::os::raw::c_int,
    pub aalloc: ::std::os::raw::c_int,
    pub dalloc: ::std::os::raw::c_int,
    pub salloc: i64,
    pub srcalloc: ::std::os::raw::c_int,
    pub idx: i64,
    pub roff: off_t,
    pub hoff: off_t,
    pub doff: off_t,
    pub eoff: off_t,
    pub xr_tag: *mut *mut ::std::os::raw::c_char,
    pub xr: *mut *mut ::std::os::raw::c_char,
    pub nxr: ::std::os::raw::c_int,
    pub abc: *const ESL_ALPHABET,
}
#[test]
fn bindgen_test_layout_ESL_SQ() {
    assert_eq!(
        ::std::mem::size_of::<ESL_SQ>(),
        216usize,
        concat!("Size of: ", stringify!(ESL_SQ))
    );
    assert_eq!(
        ::std::mem::align_of::<ESL_SQ>(),
        8usize,
        concat!("Alignment of ", stringify!(ESL_SQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).acc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).tax_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(tax_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).seq as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).dsq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(dsq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).ss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).n as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ESL_SQ), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).start as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).end as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).C as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(ESL_SQ), "::", stringify!(C))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).W as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(ESL_SQ), "::", stringify!(W))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).L as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ESL_SQ), "::", stringify!(L))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).source as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).nalloc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).aalloc as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(aalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).dalloc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(dalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).salloc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(salloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).srcalloc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(srcalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).idx as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).roff as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(roff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).hoff as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(hoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).doff as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(doff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).eoff as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(eoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).xr_tag as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(xr_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).xr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(xr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).nxr as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(nxr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ESL_SQ>())).abc as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ESL_SQ),
            "::",
            stringify!(abc)
        )
    );
}
extern "C" {
    pub fn esl_sq_Reuse(sq: *mut ESL_SQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn esl_sq_CreateDigital(abc: *const ESL_ALPHABET) -> *mut ESL_SQ;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_hmm_s {
    pub M: ::std::os::raw::c_int,
    pub t: *mut *mut f32,
    pub mat: *mut *mut f32,
    pub ins: *mut *mut f32,
    pub name: *mut ::std::os::raw::c_char,
    pub acc: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub rf: *mut ::std::os::raw::c_char,
    pub mm: *mut ::std::os::raw::c_char,
    pub consensus: *mut ::std::os::raw::c_char,
    pub cs: *mut ::std::os::raw::c_char,
    pub ca: *mut ::std::os::raw::c_char,
    pub comlog: *mut ::std::os::raw::c_char,
    pub nseq: ::std::os::raw::c_int,
    pub eff_nseq: f32,
    pub max_length: ::std::os::raw::c_int,
    pub ctime: *mut ::std::os::raw::c_char,
    pub map: *mut ::std::os::raw::c_int,
    pub checksum: u32,
    pub evparam: [f32; 6usize],
    pub cutoff: [f32; 6usize],
    pub compo: [f32; 20usize],
    pub offset: off_t,
    pub abc: *const ESL_ALPHABET,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_hmm_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_hmm_s>(),
        296usize,
        concat!("Size of: ", stringify!(p7_hmm_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_hmm_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_hmm_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).t as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).mat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(mat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).ins as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(ins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).acc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).desc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).rf as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(rf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).mm as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(mm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).consensus as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(consensus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).cs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).ca as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(ca)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).comlog as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(comlog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).nseq as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(nseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).eff_nseq as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(eff_nseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).max_length as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).ctime as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).map as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).checksum as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).evparam as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(evparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).cutoff as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(cutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).compo as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(compo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).offset as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).abc as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(abc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmm_s>())).flags as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmm_s),
            "::",
            stringify!(flags)
        )
    );
}
pub type P7_HMM = p7_hmm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_bg_s {
    pub f: *mut f32,
    pub p1: f32,
    pub fhmm: *mut ESL_HMM,
    pub omega: f32,
    pub abc: *const ESL_ALPHABET,
}
#[test]
fn bindgen_test_layout_p7_bg_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_bg_s>(),
        40usize,
        concat!("Size of: ", stringify!(p7_bg_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_bg_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_bg_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_bg_s>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_bg_s),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_bg_s>())).p1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_bg_s),
            "::",
            stringify!(p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_bg_s>())).fhmm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_bg_s),
            "::",
            stringify!(fhmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_bg_s>())).omega as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_bg_s),
            "::",
            stringify!(omega)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_bg_s>())).abc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_bg_s),
            "::",
            stringify!(abc)
        )
    );
}
pub type P7_BG = p7_bg_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_trace_s {
    pub N: ::std::os::raw::c_int,
    pub nalloc: ::std::os::raw::c_int,
    pub st: *mut ::std::os::raw::c_char,
    pub k: *mut ::std::os::raw::c_int,
    pub i: *mut ::std::os::raw::c_int,
    pub pp: *mut f32,
    pub M: ::std::os::raw::c_int,
    pub L: ::std::os::raw::c_int,
    pub ndom: ::std::os::raw::c_int,
    pub tfrom: *mut ::std::os::raw::c_int,
    pub tto: *mut ::std::os::raw::c_int,
    pub sqfrom: *mut ::std::os::raw::c_int,
    pub sqto: *mut ::std::os::raw::c_int,
    pub hmmfrom: *mut ::std::os::raw::c_int,
    pub hmmto: *mut ::std::os::raw::c_int,
    pub ndomalloc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_trace_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_trace_s>(),
        112usize,
        concat!("Size of: ", stringify!(p7_trace_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_trace_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_trace_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).nalloc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).st as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).k as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).i as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).pp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(pp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).M as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).L as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).ndom as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(ndom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).tfrom as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(tfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).tto as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(tto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).sqfrom as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(sqfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).sqto as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(sqto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).hmmfrom as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(hmmfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).hmmto as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(hmmto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_trace_s>())).ndomalloc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_trace_s),
            "::",
            stringify!(ndomalloc)
        )
    );
}
pub type P7_TRACE = p7_trace_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct p7_hmmfile_s {
    pub f: *mut FILE,
    pub fname: *mut ::std::os::raw::c_char,
    pub ssi: *mut ESL_SSI,
    pub do_gzip: ::std::os::raw::c_int,
    pub do_stdin: ::std::os::raw::c_int,
    pub newly_opened: ::std::os::raw::c_int,
    pub is_pressed: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub parser: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut p7_hmmfile_s,
            arg2: *mut *mut ESL_ALPHABET,
            arg3: *mut *mut P7_HMM,
        ) -> ::std::os::raw::c_int,
    >,
    pub efp: *mut ESL_FILEPARSER,
    pub ffp: *mut FILE,
    pub pfp: *mut FILE,
    pub syncRead: ::std::os::raw::c_int,
    pub readMutex: pthread_mutex_t,
    pub errbuf: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_p7_hmmfile_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_hmmfile_s>(),
        256usize,
        concat!("Size of: ", stringify!(p7_hmmfile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_hmmfile_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_hmmfile_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).fname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).ssi as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(ssi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).do_gzip as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(do_gzip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).do_stdin as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(do_stdin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).newly_opened as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(newly_opened)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).is_pressed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(is_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).parser as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(parser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).efp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(efp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).ffp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(ffp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).pfp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(pfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).syncRead as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(syncRead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).readMutex as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(readMutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hmmfile_s>())).errbuf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hmmfile_s),
            "::",
            stringify!(errbuf)
        )
    );
}
pub type P7_HMMFILE = p7_hmmfile_s;
#[doc = " 8. P7_SPENSEMBLE: segment pair ensembles for domain locations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_spcoord_s {
    pub idx: ::std::os::raw::c_int,
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
    pub prob: f32,
}
#[test]
fn bindgen_test_layout_p7_spcoord_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_spcoord_s>(),
        24usize,
        concat!("Size of: ", stringify!(p7_spcoord_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_spcoord_s>(),
        4usize,
        concat!("Alignment of ", stringify!(p7_spcoord_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).i as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).j as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).k as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).m as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spcoord_s>())).prob as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spcoord_s),
            "::",
            stringify!(prob)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_spensemble_s {
    pub nsamples: ::std::os::raw::c_int,
    pub sp: *mut p7_spcoord_s,
    pub nalloc: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub workspace: *mut ::std::os::raw::c_int,
    pub assignment: *mut ::std::os::raw::c_int,
    pub nc: ::std::os::raw::c_int,
    pub epc: *mut ::std::os::raw::c_int,
    pub epc_alloc: ::std::os::raw::c_int,
    pub sigc: *mut p7_spcoord_s,
    pub nsigc: ::std::os::raw::c_int,
    pub nsigc_alloc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_spensemble_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_spensemble_s>(),
        80usize,
        concat!("Size of: ", stringify!(p7_spensemble_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_spensemble_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_spensemble_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).nsamples as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(nsamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).sp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).nalloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).n as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).workspace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(workspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).assignment as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(assignment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).nc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(nc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).epc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(epc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).epc_alloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(epc_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).sigc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(sigc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).nsigc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(nsigc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_spensemble_s>())).nsigc_alloc as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_spensemble_s),
            "::",
            stringify!(nsigc_alloc)
        )
    );
}
pub type P7_SPENSEMBLE = p7_spensemble_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_alidisplay_s {
    pub rfline: *mut ::std::os::raw::c_char,
    pub mmline: *mut ::std::os::raw::c_char,
    pub csline: *mut ::std::os::raw::c_char,
    pub model: *mut ::std::os::raw::c_char,
    pub mline: *mut ::std::os::raw::c_char,
    pub aseq: *mut ::std::os::raw::c_char,
    pub ntseq: *mut ::std::os::raw::c_char,
    pub ppline: *mut ::std::os::raw::c_char,
    pub N: ::std::os::raw::c_int,
    pub hmmname: *mut ::std::os::raw::c_char,
    pub hmmacc: *mut ::std::os::raw::c_char,
    pub hmmdesc: *mut ::std::os::raw::c_char,
    pub hmmfrom: ::std::os::raw::c_int,
    pub hmmto: ::std::os::raw::c_int,
    pub M: ::std::os::raw::c_int,
    pub sqname: *mut ::std::os::raw::c_char,
    pub sqacc: *mut ::std::os::raw::c_char,
    pub sqdesc: *mut ::std::os::raw::c_char,
    pub sqfrom: i64,
    pub sqto: i64,
    pub L: i64,
    pub memsize: ::std::os::raw::c_int,
    pub mem: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_p7_alidisplay_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_alidisplay_s>(),
        176usize,
        concat!("Size of: ", stringify!(p7_alidisplay_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_alidisplay_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_alidisplay_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).rfline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(rfline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).mmline as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(mmline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).csline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(csline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).model as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).mline as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(mline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).aseq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(aseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).ntseq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(ntseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).ppline as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(ppline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).N as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).hmmname as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(hmmname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).hmmacc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(hmmacc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).hmmdesc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(hmmdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).hmmfrom as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(hmmfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).hmmto as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(hmmto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).M as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).sqname as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(sqname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).sqacc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(sqacc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).sqdesc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(sqdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).sqfrom as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(sqfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).sqto as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(sqto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).L as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).memsize as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_alidisplay_s>())).mem as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_alidisplay_s),
            "::",
            stringify!(mem)
        )
    );
}
pub type P7_ALIDISPLAY = p7_alidisplay_s;
#[doc = " 10. P7_DOMAINDEF: reusably managing workflow in defining domains"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_dom_s {
    pub ienv: i64,
    pub jenv: i64,
    pub iali: i64,
    pub jali: i64,
    pub iorf: i64,
    pub jorf: i64,
    pub envsc: f32,
    pub domcorrection: f32,
    pub dombias: f32,
    pub oasc: f32,
    pub bitscore: f32,
    pub lnP: f64,
    pub is_reported: ::std::os::raw::c_int,
    pub is_included: ::std::os::raw::c_int,
    pub scores_per_pos: *mut f32,
    pub ad: *mut P7_ALIDISPLAY,
}
#[test]
fn bindgen_test_layout_p7_dom_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_dom_s>(),
        104usize,
        concat!("Size of: ", stringify!(p7_dom_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_dom_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_dom_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).ienv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(ienv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).jenv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(jenv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).iali as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(iali)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).jali as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(jali)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).iorf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(iorf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).jorf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(jorf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).envsc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(envsc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).domcorrection as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(domcorrection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).dombias as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(dombias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).oasc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(oasc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).bitscore as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(bitscore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).lnP as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(lnP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).is_reported as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(is_reported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).is_included as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(is_included)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).scores_per_pos as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(scores_per_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_dom_s>())).ad as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_dom_s),
            "::",
            stringify!(ad)
        )
    );
}
pub type P7_DOMAIN = p7_dom_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_domaindef_s {
    pub mocc: *mut f32,
    pub btot: *mut f32,
    pub etot: *mut f32,
    pub L: ::std::os::raw::c_int,
    pub Lalloc: ::std::os::raw::c_int,
    pub n2sc: *mut f32,
    pub r: *mut ESL_RANDOMNESS,
    pub do_reseeding: ::std::os::raw::c_int,
    pub sp: *mut P7_SPENSEMBLE,
    pub tr: *mut P7_TRACE,
    pub gtr: *mut P7_TRACE,
    pub rt1: f32,
    pub rt2: f32,
    pub rt3: f32,
    pub nsamples: ::std::os::raw::c_int,
    pub min_overlap: f32,
    pub of_smaller: ::std::os::raw::c_int,
    pub max_diagdiff: ::std::os::raw::c_int,
    pub min_posterior: f32,
    pub min_endpointp: f32,
    pub dcl: *mut P7_DOMAIN,
    pub ndom: ::std::os::raw::c_int,
    pub nalloc: ::std::os::raw::c_int,
    pub nexpected: f32,
    pub nregions: ::std::os::raw::c_int,
    pub nclustered: ::std::os::raw::c_int,
    pub noverlaps: ::std::os::raw::c_int,
    pub nenvelopes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_domaindef_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_domaindef_s>(),
        160usize,
        concat!("Size of: ", stringify!(p7_domaindef_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_domaindef_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_domaindef_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).mocc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(mocc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).btot as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(btot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).etot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(etot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).L as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).Lalloc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(Lalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).n2sc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(n2sc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).r as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).do_reseeding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(do_reseeding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).sp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).tr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(tr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).gtr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(gtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).rt1 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(rt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).rt2 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(rt2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).rt3 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(rt3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nsamples as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nsamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).min_overlap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(min_overlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).of_smaller as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(of_smaller)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).max_diagdiff as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(max_diagdiff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).min_posterior as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(min_posterior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).min_endpointp as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(min_endpointp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).dcl as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(dcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).ndom as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(ndom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nalloc as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nexpected as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nexpected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nregions as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nregions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nclustered as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nclustered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).noverlaps as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(noverlaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_domaindef_s>())).nenvelopes as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_domaindef_s),
            "::",
            stringify!(nenvelopes)
        )
    );
}
pub type P7_DOMAINDEF = p7_domaindef_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_hit_s {
    pub name: *mut ::std::os::raw::c_char,
    pub acc: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub window_length: ::std::os::raw::c_int,
    pub sortkey: f64,
    pub score: f32,
    pub pre_score: f32,
    pub sum_score: f32,
    pub lnP: f64,
    pub pre_lnP: f64,
    pub sum_lnP: f64,
    pub nexpected: f32,
    pub nregions: ::std::os::raw::c_int,
    pub nclustered: ::std::os::raw::c_int,
    pub noverlaps: ::std::os::raw::c_int,
    pub nenvelopes: ::std::os::raw::c_int,
    pub ndom: ::std::os::raw::c_int,
    pub flags: u32,
    pub nreported: ::std::os::raw::c_int,
    pub nincluded: ::std::os::raw::c_int,
    pub best_domain: ::std::os::raw::c_int,
    pub seqidx: i64,
    pub subseq_start: i64,
    pub dcl: *mut P7_DOMAIN,
    pub offset: esl_pos_t,
}
#[test]
fn bindgen_test_layout_p7_hit_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_hit_s>(),
        152usize,
        concat!("Size of: ", stringify!(p7_hit_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_hit_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_hit_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).acc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).window_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(window_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).sortkey as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(sortkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).score as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).pre_score as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(pre_score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).sum_score as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(sum_score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).lnP as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(lnP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).pre_lnP as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(pre_lnP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).sum_lnP as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(sum_lnP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nexpected as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nexpected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nregions as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nregions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nclustered as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nclustered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).noverlaps as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(noverlaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nenvelopes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nenvelopes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).ndom as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(ndom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).flags as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nreported as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nreported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).nincluded as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(nincluded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).best_domain as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(best_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).seqidx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(seqidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).subseq_start as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(subseq_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).dcl as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(dcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_hit_s>())).offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_hit_s),
            "::",
            stringify!(offset)
        )
    );
}
pub type P7_HIT = p7_hit_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_tophits_s {
    pub hit: *mut *mut P7_HIT,
    pub unsrt: *mut P7_HIT,
    pub Nalloc: u64,
    pub N: u64,
    pub nreported: u64,
    pub nincluded: u64,
    pub is_sorted_by_sortkey: ::std::os::raw::c_int,
    pub is_sorted_by_seqidx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_tophits_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_tophits_s>(),
        56usize,
        concat!("Size of: ", stringify!(p7_tophits_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_tophits_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_tophits_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).hit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).unsrt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(unsrt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).Nalloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(Nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).N as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).nreported as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(nreported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_tophits_s>())).nincluded as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(nincluded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<p7_tophits_s>())).is_sorted_by_sortkey as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(is_sorted_by_sortkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<p7_tophits_s>())).is_sorted_by_seqidx as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_tophits_s),
            "::",
            stringify!(is_sorted_by_seqidx)
        )
    );
}
pub type P7_TOPHITS = p7_tophits_s;
pub type __m128 = [f32; 4usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_oprofile_s {
    pub rbv: *mut *mut __m128i,
    pub sbv: *mut *mut __m128i,
    pub tbm_b: u8,
    pub tec_b: u8,
    pub tjb_b: u8,
    pub scale_b: f32,
    pub base_b: u8,
    pub bias_b: u8,
    pub rwv: *mut *mut __m128i,
    pub twv: *mut __m128i,
    pub xw: [[i16; 2usize]; 4usize],
    pub scale_w: f32,
    pub base_w: i16,
    pub ddbound_w: i16,
    pub ncj_roundoff: f32,
    pub rfv: *mut *mut __m128,
    pub tfv: *mut __m128,
    pub xf: [[f32; 2usize]; 4usize],
    pub rbv_mem: *mut __m128i,
    pub sbv_mem: *mut __m128i,
    pub rwv_mem: *mut __m128i,
    pub twv_mem: *mut __m128i,
    pub tfv_mem: *mut __m128,
    pub rfv_mem: *mut __m128,
    pub offs: [off_t; 3usize],
    pub roff: off_t,
    pub eoff: off_t,
    pub name: *mut ::std::os::raw::c_char,
    pub acc: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub rf: *mut ::std::os::raw::c_char,
    pub mm: *mut ::std::os::raw::c_char,
    pub cs: *mut ::std::os::raw::c_char,
    pub consensus: *mut ::std::os::raw::c_char,
    pub evparam: [f32; 6usize],
    pub cutoff: [f32; 6usize],
    pub compo: [f32; 20usize],
    pub abc: *const ESL_ALPHABET,
    pub L: ::std::os::raw::c_int,
    pub M: ::std::os::raw::c_int,
    pub max_length: ::std::os::raw::c_int,
    pub allocM: ::std::os::raw::c_int,
    pub allocQ4: ::std::os::raw::c_int,
    pub allocQ8: ::std::os::raw::c_int,
    pub allocQ16: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub nj: f32,
    pub clone: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_p7_oprofile_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_oprofile_s>(),
        448usize,
        concat!("Size of: ", stringify!(p7_oprofile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_oprofile_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_oprofile_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rbv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rbv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).sbv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(sbv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).tbm_b as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(tbm_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).tec_b as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(tec_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).tjb_b as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(tjb_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).scale_b as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(scale_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).base_b as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(base_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).bias_b as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(bias_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rwv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rwv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).twv as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(twv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).xw as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(xw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).scale_w as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(scale_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).base_w as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(base_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).ddbound_w as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(ddbound_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).ncj_roundoff as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(ncj_roundoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rfv as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rfv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).tfv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(tfv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).xf as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(xf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rbv_mem as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rbv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).sbv_mem as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(sbv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rwv_mem as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rwv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).twv_mem as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(twv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).tfv_mem as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(tfv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rfv_mem as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rfv_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).offs as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).roff as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(roff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).eoff as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(eoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).name as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).acc as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).desc as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).rf as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(rf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).mm as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(mm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).cs as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).consensus as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(consensus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).evparam as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(evparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).cutoff as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(cutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).compo as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(compo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).abc as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(abc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).L as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).M as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).max_length as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).allocM as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(allocM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).allocQ4 as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(allocQ4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).allocQ8 as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(allocQ8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).allocQ16 as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(allocQ16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).mode as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).nj as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(nj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_oprofile_s>())).clone as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_oprofile_s),
            "::",
            stringify!(clone)
        )
    );
}
pub type P7_OPROFILE = p7_oprofile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_omx_s {
    pub M: ::std::os::raw::c_int,
    pub L: ::std::os::raw::c_int,
    pub dpf: *mut *mut __m128,
    pub dpw: *mut *mut __m128i,
    pub dpb: *mut *mut __m128i,
    pub dp_mem: *mut ::std::os::raw::c_void,
    pub allocR: ::std::os::raw::c_int,
    pub validR: ::std::os::raw::c_int,
    pub allocQ4: ::std::os::raw::c_int,
    pub allocQ8: ::std::os::raw::c_int,
    pub allocQ16: ::std::os::raw::c_int,
    pub ncells: size_t,
    pub xmx: *mut f32,
    pub x_mem: *mut ::std::os::raw::c_void,
    pub allocXR: ::std::os::raw::c_int,
    pub totscale: f32,
    pub has_own_scales: ::std::os::raw::c_int,
    pub debugging: ::std::os::raw::c_int,
    pub dfp: *mut FILE,
}
#[test]
fn bindgen_test_layout_p7_omx_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_omx_s>(),
        112usize,
        concat!("Size of: ", stringify!(p7_omx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_omx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_omx_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).L as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).dpf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(dpf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).dpw as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(dpw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).dpb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(dpb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).dp_mem as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(dp_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).allocR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(allocR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).validR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(validR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).allocQ4 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(allocQ4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).allocQ8 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(allocQ8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).allocQ16 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(allocQ16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).ncells as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(ncells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).xmx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(xmx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).x_mem as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(x_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).allocXR as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(allocXR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).totscale as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(totscale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).has_own_scales as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(has_own_scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).debugging as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(debugging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_omx_s>())).dfp as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_omx_s),
            "::",
            stringify!(dfp)
        )
    );
}
pub type P7_OMX = p7_omx_s;
extern "C" {
    pub fn p7_oprofile_Destroy(om: *mut P7_OPROFILE);
}
extern "C" {
    pub fn p7_oprofile_ReconfigLength(
        om: *mut P7_OPROFILE,
        L: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_oprofile_ReadMSV(
        hfp: *mut P7_HMMFILE,
        byp_abc: *mut *mut ESL_ALPHABET,
        ret_om: *mut *mut P7_OPROFILE,
    ) -> ::std::os::raw::c_int;
}
pub const p7_pipemodes_e_p7_SEARCH_SEQS: p7_pipemodes_e = 0;
pub const p7_pipemodes_e_p7_SCAN_MODELS: p7_pipemodes_e = 1;
#[doc = " 16. P7_PIPELINE: H3's accelerated seq/profile comparison pipeline"]
pub type p7_pipemodes_e = ::std::os::raw::c_uint;
pub const p7_zsetby_e_p7_ZSETBY_NTARGETS: p7_zsetby_e = 0;
pub const p7_zsetby_e_p7_ZSETBY_OPTION: p7_zsetby_e = 1;
pub const p7_zsetby_e_p7_ZSETBY_FILEINFO: p7_zsetby_e = 2;
pub type p7_zsetby_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p7_pipeline_s {
    pub oxf: *mut P7_OMX,
    pub oxb: *mut P7_OMX,
    pub fwd: *mut P7_OMX,
    pub bck: *mut P7_OMX,
    pub r: *mut ESL_RANDOMNESS,
    pub do_reseeding: ::std::os::raw::c_int,
    pub do_alignment_score_calc: ::std::os::raw::c_int,
    pub ddef: *mut P7_DOMAINDEF,
    pub by_E: ::std::os::raw::c_int,
    pub E: f64,
    pub T: f64,
    pub dom_by_E: ::std::os::raw::c_int,
    pub domE: f64,
    pub domT: f64,
    pub use_bit_cutoffs: ::std::os::raw::c_int,
    pub inc_by_E: ::std::os::raw::c_int,
    pub incE: f64,
    pub incT: f64,
    pub incdom_by_E: ::std::os::raw::c_int,
    pub incdomE: f64,
    pub incdomT: f64,
    pub Z: f64,
    pub domZ: f64,
    pub Z_setby: p7_zsetby_e,
    pub domZ_setby: p7_zsetby_e,
    pub do_max: ::std::os::raw::c_int,
    pub F1: f64,
    pub F2: f64,
    pub F3: f64,
    pub B1: ::std::os::raw::c_int,
    pub B2: ::std::os::raw::c_int,
    pub B3: ::std::os::raw::c_int,
    pub do_biasfilter: ::std::os::raw::c_int,
    pub do_null2: ::std::os::raw::c_int,
    pub nmodels: u64,
    pub nseqs: u64,
    pub nres: u64,
    pub nnodes: u64,
    pub n_past_msv: u64,
    pub n_past_bias: u64,
    pub n_past_vit: u64,
    pub n_past_fwd: u64,
    pub n_output: u64,
    pub pos_past_msv: u64,
    pub pos_past_bias: u64,
    pub pos_past_vit: u64,
    pub pos_past_fwd: u64,
    pub pos_output: u64,
    pub mode: p7_pipemodes_e,
    pub long_targets: ::std::os::raw::c_int,
    pub strands: ::std::os::raw::c_int,
    pub W: ::std::os::raw::c_int,
    pub block_length: ::std::os::raw::c_int,
    pub show_accessions: ::std::os::raw::c_int,
    pub show_alignments: ::std::os::raw::c_int,
    pub hfp: *mut P7_HMMFILE,
    pub errbuf: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_p7_pipeline_s() {
    assert_eq!(
        ::std::mem::size_of::<p7_pipeline_s>(),
        512usize,
        concat!("Size of: ", stringify!(p7_pipeline_s))
    );
    assert_eq!(
        ::std::mem::align_of::<p7_pipeline_s>(),
        8usize,
        concat!("Alignment of ", stringify!(p7_pipeline_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).oxf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(oxf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).oxb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(oxb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).fwd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(fwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).bck as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(bck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).r as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).do_reseeding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(do_reseeding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<p7_pipeline_s>())).do_alignment_score_calc as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(do_alignment_score_calc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).ddef as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(ddef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).by_E as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(by_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).E as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).T as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).dom_by_E as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(dom_by_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).domE as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(domE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).domT as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(domT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).use_bit_cutoffs as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(use_bit_cutoffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).inc_by_E as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(inc_by_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).incE as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(incE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).incT as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(incT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).incdom_by_E as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(incdom_by_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).incdomE as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(incdomE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).incdomT as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(incdomT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).Z as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(Z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).domZ as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(domZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).Z_setby as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(Z_setby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).domZ_setby as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(domZ_setby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).do_max as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(do_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).F1 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(F1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).F2 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(F2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).F3 as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(F3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).B1 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).B2 as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).B3 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(B3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).do_biasfilter as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(do_biasfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).do_null2 as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(do_null2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).nmodels as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(nmodels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).nseqs as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(nseqs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).nres as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(nres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).nnodes as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(nnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).n_past_msv as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(n_past_msv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).n_past_bias as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(n_past_bias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).n_past_vit as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(n_past_vit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).n_past_fwd as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(n_past_fwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).n_output as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(n_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).pos_past_msv as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(pos_past_msv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).pos_past_bias as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(pos_past_bias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).pos_past_vit as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(pos_past_vit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).pos_past_fwd as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(pos_past_fwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).pos_output as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(pos_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).mode as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).long_targets as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(long_targets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).strands as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(strands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).W as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(W)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).block_length as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(block_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).show_accessions as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(show_accessions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).show_alignments as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(show_alignments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).hfp as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(hfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p7_pipeline_s>())).errbuf as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(p7_pipeline_s),
            "::",
            stringify!(errbuf)
        )
    );
}
pub type P7_PIPELINE = p7_pipeline_s;
extern "C" {
    pub fn p7_FLogsumInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_bg_Create(abc: *const ESL_ALPHABET) -> *mut P7_BG;
}
extern "C" {
    pub fn p7_bg_SetLength(bg: *mut P7_BG, L: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_hmmfile_OpenE(
        filename: *const ::std::os::raw::c_char,
        env: *mut ::std::os::raw::c_char,
        ret_hfp: *mut *mut P7_HMMFILE,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_hmmfile_Close(hfp: *mut P7_HMMFILE);
}
extern "C" {
    pub fn p7_pipeline_Create(
        go: *const ESL_GETOPTS,
        M_hint: ::std::os::raw::c_int,
        L_hint: ::std::os::raw::c_int,
        long_targets: ::std::os::raw::c_int,
        mode: p7_pipemodes_e,
    ) -> *mut P7_PIPELINE;
}
extern "C" {
    pub fn p7_pipeline_Reuse(pli: *mut P7_PIPELINE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_pipeline_Destroy(pli: *mut P7_PIPELINE);
}
extern "C" {
    pub fn p7_pli_NewModel(
        pli: *mut P7_PIPELINE,
        om: *const P7_OPROFILE,
        bg: *mut P7_BG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_pli_NewSeq(pli: *mut P7_PIPELINE, sq: *const ESL_SQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_Pipeline(
        pli: *mut P7_PIPELINE,
        om: *mut P7_OPROFILE,
        bg: *mut P7_BG,
        sq: *const ESL_SQ,
        ntsq: *const ESL_SQ,
        th: *mut P7_TOPHITS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p7_tophits_Create() -> *mut P7_TOPHITS;
}
extern "C" {
    pub fn p7_tophits_Destroy(h: *mut P7_TOPHITS);
}
